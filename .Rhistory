?cor()
# CORRELATION ANALYSIS
head(mtcars)
# Test whether or not horsepower (hp) is correlated with quarter-mile
# race time (qsec).
plt <- ggplot(mtcars, aes(x=hp, y=qsec))
install.packages("tidyverse")
install.packages("jsonlite")
# Test whether or not horsepower (hp) is correlated with quarter-mile
# race time (qsec).
plt <- ggplot(mtcars,aes(x=hp, y=qsec))
library(jsonlite)
library(tidyverse)
# Test whether or not horsepower (hp) is correlated with quarter-mile
# race time (qsec).
plt <- ggplot(mtcars,aes(x=hp, y=qsec))
plt + geom_point()
cor(mtcars$hp,mtcars$qsec) #calculate the correlation coefficient
# SAMPLE VS POPULATION TESTING
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
setwd("C:/Users/aniam/OneDrive/Desktop/DABC Class Folder/R_Analysis/01_Demo")
setwd("C:/Users/aniam/OneDrive/Desktop/DABC Class Folder/R_Analysis/01_Demo")
# SAMPLE VS POPULATION TESTING
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
View(population_table)
head(used_cars)
head(population_table)
# Test whether or not vehicle miles driven and selling price are correlated.
plt <- ggplot(population_table,aes(x=Miles_Driven,y=Selling_Price))
plt + geom_point()
# Calculate the correlation coefficient
cor(population_table$Miles_Driven,population_table$Selling_Price)
# Select numeric columns from used_cars dataframe and convert them to matrix
used_cars_matrix <- as.matrix(population_table[,c("Selling_Price","Present_Price","Miles_Driven")])
head(used_cars_matrix)
# Calculating correlation matrix for selected values
cor(used_cars_matrix)
?lm
# Test whether or not horsepower (hp) is correlated with quarter-mile
# race time (qsec).
plt <- ggplot(mtcars,aes(x=hp, y=qsec))
plt + geom_point()
# Create a linear regression model for hp and qsec form mtcars
lm(qsec ~ hp,mtcars)
# To determine p-value and r-squared value for a simple linear regression
# model we'll use:
summary(lm(qsec~hp,mtcars))
# Calculate the data points to use for the line plot
model <- lm(hp~qsec,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
# Visualize the fitted line against our dataset
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals),color = "red")
# Visualize the fitted line against our dataset
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
# Calculate the data points to use for the line plot
model <- lm(hp ~ qsec,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
View(model)
# Calculate the data points to use for the line plot
model <- lm(hp ~ qsec, mtcars)
yvals <- -0.02*mtcars$hp + 20.56
# Visualize the fitted line against our dataset
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
model$coefficients["hp"]
model$coefficients['hp']
model$coefficients['hp']
# To better predict the quarter-mile time (qsec) dependent variable, we can add
# other variables of interest such as fuel efficiency (mpg), engine size (disp),
# rear axle ratio (drat), vehicle weight (wt), and horsepower (hp) as independent
# variables to our multiple linear regression model.
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
summary(lm(qsec ~ mpg + disp + drat + wt + hp, data=mtcars))
setwd("C:/Users/aniam/OneDrive/Desktop/DABC Class Folder/R_Analysis/MechaCars")
setwd("C:/Users/aniam/OneDrive/Desktop/DABC Class Folder/R_Analysis/01_Demo")
setwd("C:/Users/aniam/OneDrive/Desktop/DABC Class Folder/R_Analysis/MechaCars")
install.packages("tidyverse")
install.packages("tidyverse")
setwd("C:/Users/aniam/OneDrive/Desktop/DABC Class Folder/R_Analysis/MechaCars")
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
View(MechaCar_mpg)
View(MechaCar_mpg)
head(MechaCar_mpg)
# Generate multiple linear regression model
lm(mpg ~ "vehicale length" + "vehicle weight" + "spoiler angle" + "ground clearance" + AWD,MechaCar_mpg)
library(tidyverse)
# Rename columns of the dataset
MechaCar_mpg %>% rename(vlength = "vehicle length", vweight = "vehicle weight", spangle = "spoiler angle", grclearance = "ground clearance")
# Generate multiple linear regression model
lm(mpg ~ vlength + vweight + spangle + grclearance + AWD,MechaCar_mpg)
head(MechaCar_mpg)
# Rename columns of the dataset
MechaCar_mpg %>% rename(vlength = "vehicle length", vweight = "vehicle weight", spangle = "spoiler angle", grclearance = "ground clearance")
head(MechaCar_mpg)
# Rename columns of the dataset
MechaCar_mpg <-MechaCar_mpg %>%
rename(
vlength = "vehicle length",
vweight = "vehicle weight",
spangle = "spoiler angle",
grclearance = "ground clearance")
head(MechaCar_mpg)
# Generate multiple linear regression model
lm(mpg ~ vlength + vweight + spangle + grclearance + AWD,MechaCar_mpg)
# Rename columns of the dataset
MechaCar_mpg <- MechaCar_mpg %>%
rename(
vlength = "vehicle length",
vweight = "vehicle weight",
spangle = "spoiler angle",
grclearance = "ground clearance")
head(MechaCar_mpg)
# Generate multiple linear regression model
lm(mpg ~ vlength + vweight + spangle + grclearance + AWD,MechaCar_mpg)
# Generate multiple linear regression model
lm(formula = mpg ~ vlength + vweight + spangle + grclearance + AWD, data = MechaCar_mpg)
summary(lm(mpg ~ vlength + vweight + spangle + grclearance + AWD,MechaCar_mpg))
susp_coil <- read.csv(file='Suspension_Coil.csv', check.names=F, stringsAsFactors = F)
View(susp_coil)
susp_coil <- filter(susp_coil$VehicleID = "V31443")
susp_coil %>% filter(susp_coil$VehicleID = "V31443")
susp_coil %>% mutate(susp_coil$VehicleID = "V31443")
susp_coil %>% filter(susp_coil$VehicleID == "V31443")
View(susp_coil)
susp_coil %>% filter(susp_coil$VehicleID == "V40858")
?summary
summary(susp_coil)
summary(susp_coil$PSI)
# Visualizing PSI distribution using density plot
ggplot(susp_coil,aes(x=PSI))
# Visualizing PSI distribution using density plot
ggplot(susp_coil,aes(x=PSI)) + geom_density()
shapiro.test(susp_coil$PSI)
?t-test
t.test()
?t.test()
t.test(x=susp_coil$PSI,mu=1500)
t.test(x=log10(susp_coil$PSI),mu=1500)
t.test(x=log10(susp_coil$PSI),mu=log10(1500))
t.test(x=susp_coil$PSI,mu=1500)
# Generate summary statistics
summary(lm(mpg ~ vlength + vweight + spangle + grclearance + AWD,MechaCar_mpg))
mean(susp_coil$PSI)
median(susp_coil$PSI) #
var(susp_coil$PSI)
sd(susp_coil$PSI)
summary(susp_coil$PSI)
sd(susp_coil$PSI) # standard deviation =
# Suspension Coil T-Test
# H0: There is no statistical difference between the observed sample mean and
# its population mean.
# Ha: There is a statistical difference between the observed sample mean and
# its population mean.
# Population mean is 1500 pounds per inch.
t.test(x=susp_coil$PSI,mu=1500)
